# Coverage Baseline - Sprint 3 Post-Refactoring

## Overall Coverage: 77.45% (5074 statements, 1144 missed)

### Key Module Coverage:

nlsq/validators.py:         396 stmts, 61 miss, 84.60% coverage
nlsq/algorithm_selector.py: 186 stmts,  7 miss, 96.24% coverage
nlsq/minpack.py:            345 stmts, 61 miss, 82.32% coverage
nlsq/least_squares.py:      347 stmts, 54 miss, 84.44% coverage

### Low Coverage Modules (Potential Targets):

nlsq/trf.py:                575 stmts, 239 miss, 58.43% coverage (core algorithms)
nlsq/robust_decomposition.py: 198 stmts, 98 miss, 50.51% coverage
nlsq/smart_cache.py:        226 stmts, 106 miss, 53.10% coverage
nlsq/sparse_jacobian.py:    131 stmts, 68 miss, 48.09% coverage
nlsq/svd_fallback.py:       55 stmts, 28 miss, 49.09% coverage

### High Coverage Modules (Well Tested):

nlsq/_optimize.py:          17 stmts, 0 miss, 100.00% coverage
nlsq/constants.py:          33 stmts, 0 miss, 100.00% coverage
nlsq/loss_functions.py:     142 stmts, 0 miss, 100.00% coverage
nlsq/optimizer_base.py:     72 stmts, 4 miss, 94.44% coverage
nlsq/memory_pool.py:        94 stmts, 4 miss, 95.74% coverage

## Analysis: Helper Method Test Coverage

### Sprint 2-3 Helper Methods (Refactored Functions):

1. **validators.validate_least_squares_inputs** (84.60% coverage)
   - 6 helper methods extracted
   - Well-covered by integration tests
   - **Recommendation**: No additional unit tests needed

2. **algorithm_selector.select_algorithm** (96.24% coverage)
   - 14 helper methods extracted
   - Excellent coverage from integration tests
   - **Recommendation**: No additional unit tests needed

3. **minpack._prepare_curve_fit_inputs** (82.32% coverage)
   - Helper methods extracted
   - Good coverage from curve_fit tests
   - **Recommendation**: No additional unit tests needed

### Gaps: Low Coverage Modules (Non-Helper Related)

The modules with <60% coverage are NOT from Sprint 1-3 refactoring:
- **trf.py** (58.43%): Core algorithms, complex but working
- **robust_decomposition.py** (50.51%): Advanced features, optional
- **smart_cache.py** (53.10%): Caching logic, low priority
- **sparse_jacobian.py** (48.09%): Advanced features, optional
- **svd_fallback.py** (49.09%): Fallback logic, rarely used

**Recommendation**: These modules could benefit from more tests, but they are:
1. Not related to Sprint 1-3 helper extraction
2. Advanced/optional features
3. Lower priority than user-facing improvements

## Conclusion: Helper Unit Tests

**Decision**: Do NOT add dedicated unit tests for helper methods because:

1. **High Coverage Already**: 84-96% for refactored modules
2. **Integration Tests Sufficient**: All 817 tests passing (100% pass rate)
3. **Helpers from Tested Code**: Extracted from well-tested functions
4. **Diminishing Returns**: Better ROI from other improvements
5. **Close to Target**: 77% → 80% achievable without helper tests

**Alternative Priority**: Focus on low-coverage modules (trf.py, robust_decomposition.py) if test coverage improvement is needed.

## Recommendation for Future Work

If test coverage improvement is desired (77% → 80%), prioritize:

1. **trf.py** edge cases (58% → 70%): +12% gain
2. **robust_decomposition.py** error paths (50% → 70%): +10% gain
3. **sparse_jacobian.py** integration tests (48% → 65%): +8% gain

This would increase overall coverage by ~2-3 percentage points with better ROI than helper unit tests.

---
Generated: 2025-10-07
Status: Analysis complete
Recommendation: Skip helper unit tests, focus on features/UX
