name: âš¡ Performance Issue
description: Report slow performance or unexpectedly high memory usage
title: "[Performance]: "
labels: ["performance", "needs-triage"]
assignees:
  - imewei

body:
  - type: markdown
    attributes:
      value: |
        Thank you for reporting a performance issue! Benchmarks help us improve NLSQ.

  - type: textarea
    id: description
    attributes:
      label: Performance Issue Description
      description: Describe the performance problem you're experiencing
      placeholder: |
        When fitting a curve with N data points, it takes X seconds, which seems slow...
        Memory usage grows to Y GB, which seems excessive...
    validations:
      required: true

  - type: textarea
    id: benchmark
    attributes:
      label: Benchmark Code
      description: Minimal code to reproduce the performance issue
      placeholder: |
        ```python
        import nlsq
        import numpy as np
        import time

        # Your benchmark code here
        ```
      value: |
        ```python
        import nlsq
        import numpy as np
        import time

        # Paste your benchmark code here
        start = time.time()
        # ... your code ...
        print(f"Time: {time.time() - start:.2f}s")
        ```
    validations:
      required: true

  - type: textarea
    id: timing
    attributes:
      label: Timing Results
      description: How long does it take? How much memory does it use?
      placeholder: |
        Current performance:
        - Time: 120 seconds
        - Memory: 8 GB peak

        Expected performance:
        - Time: ~10 seconds (based on SciPy benchmark)
        - Memory: ~1 GB
    validations:
      required: true

  - type: textarea
    id: comparison
    attributes:
      label: Comparison with SciPy (if applicable)
      description: How does NLSQ compare to scipy.optimize.curve_fit for your use case?
      placeholder: |
        SciPy performance:
        - Time: 5 seconds (CPU)
        - Memory: 500 MB

        NLSQ performance:
        - Time: 120 seconds (GPU)
        - Memory: 8 GB

        Note: NLSQ is 24x slower than expected for GPU
    validations:
      required: false

  - type: input
    id: dataset-size
    attributes:
      label: Dataset Size
      description: How many data points are you fitting?
      placeholder: "1,000,000 points"
    validations:
      required: true

  - type: input
    id: parameters
    attributes:
      label: Number of Parameters
      description: How many parameters in your fit function?
      placeholder: "10 parameters"
    validations:
      required: true

  - type: dropdown
    id: device
    attributes:
      label: Device
      description: What device are you using?
      options:
        - CPU
        - GPU (CUDA)
        - GPU (ROCm)
        - TPU
        - Other
    validations:
      required: true

  - type: textarea
    id: hardware
    attributes:
      label: Hardware Details
      description: Provide details about your hardware
      placeholder: |
        CPU: Intel Xeon 8-core
        GPU: NVIDIA V100 32GB
        RAM: 64GB
        Storage: NVMe SSD
    validations:
      required: true

  - type: input
    id: nlsq-version
    attributes:
      label: NLSQ Version
      description: "Output of: `python -c 'import nlsq; print(nlsq.__version__)'`"
      placeholder: "0.1.0"
    validations:
      required: true

  - type: input
    id: jax-version
    attributes:
      label: JAX Version
      description: "Output of: `python -c 'import jax; print(jax.__version__)'`"
      placeholder: "0.4.20"
    validations:
      required: true

  - type: textarea
    id: profiling
    attributes:
      label: Profiling Results (Optional)
      description: |
        If you've profiled the code, include results:
        ```bash
        python -m cProfile -o profile.stats your_script.py
        python -c "import pstats; p = pstats.Stats('profile.stats'); p.sort_stats('cumulative').print_stats(20)"
        ```
      placeholder: |
        ```
        ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        ...
        ```
    validations:
      required: false

  - type: textarea
    id: additional
    attributes:
      label: Additional Context
      description: Any other context about the performance issue
      placeholder: |
        - This happens only with certain types of data...
        - Performance degrades after N iterations...
        - Memory usage grows linearly/exponentially...
    validations:
      required: false

  - type: checkboxes
    id: checklist
    attributes:
      label: Checklist
      description: Please confirm
      options:
        - label: I have searched existing issues to ensure this is not a duplicate
          required: true
        - label: I have profiled the code to identify bottlenecks
          required: false
        - label: I have compared with SciPy performance (if applicable)
          required: false
