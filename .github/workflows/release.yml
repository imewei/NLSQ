name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.4)'
        required: true
        type: string
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: true
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write  # Required for PyPI trusted publishing

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Validate Release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is_prerelease: ${{ steps.check-version.outputs.is_prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag or input
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Release version: $VERSION"

      - name: Check version format
        id: check-version
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"

          # Check if version matches semver pattern
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$'; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-prerelease"
            exit 1
          fi

          # Check if it's a prerelease
          if echo "$VERSION" | grep -E '-'; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "⚠️  Pre-release version detected"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "✅ Stable release version"
          fi

      - name: Verify CHANGELOG entry
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [ -f CHANGELOG.md ]; then
            if ! grep -q "## \[$VERSION\]" CHANGELOG.md && ! grep -q "## $VERSION" CHANGELOG.md; then
              echo "⚠️  Warning: No CHANGELOG entry found for version $VERSION"
            else
              echo "✅ CHANGELOG entry found"
            fi
          else
            echo "⚠️  No CHANGELOG.md file found"
          fi

  # Build Distribution
  build-distribution:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-wheel-contents

      - name: Build distributions
        run: python -m build

      - name: Check distributions
        run: |
          twine check dist/*
          check-wheel-contents dist/*.whl

      - name: Verify version in package
        run: |
          pip install dist/*.whl
          PACKAGE_VERSION=$(python -c "import nlsq; print(nlsq.__version__)")
          EXPECTED_VERSION="${{ needs.validate-release.outputs.version }}"

          echo "Package version: $PACKAGE_VERSION"
          echo "Expected version: $EXPECTED_VERSION"

          if [ "$PACKAGE_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "❌ Version mismatch!"
            exit 1
          fi
          echo "✅ Version matches"

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: distributions
          path: dist/
          retention-days: 30

  # Run Full Test Suite
  test-release:
    name: Test Release
    runs-on: ubuntu-latest
    needs: build-distribution
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: distributions
          path: dist/

      - name: Install from wheel
        run: pip install dist/*.whl

      - name: Run smoke tests
        run: |
          python -c "
          import nlsq
          import jax.numpy as jnp
          import numpy as np

          print(f'✅ NLSQ version: {nlsq.__version__}')

          # Test basic curve fitting
          def exponential(x, a, b):
              return a * jnp.exp(-b * x)

          x = jnp.linspace(0, 4, 50)
          y = 2.5 * jnp.exp(-1.3 * x) + 0.1 * np.random.randn(50)

          popt, pcov = nlsq.curve_fit(exponential, x, y)
          print(f'✅ curve_fit test passed: a={popt[0]:.2f}, b={popt[1]:.2f}')

          # Test reusable fitter
          fitter = nlsq.CurveFit()
          popt2, pcov2 = fitter.curve_fit(exponential, x, y)
          print(f'✅ CurveFit test passed: a={popt2[0]:.2f}, b={popt2[1]:.2f}')
          "

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-distribution, test-release]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true')
    environment:
      name: pypi
      url: https://pypi.org/p/nlsq
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true

  # Create GitHub Release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: distributions
          path: dist/

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Extract changelog section for this version
          if [ -f CHANGELOG.md ]; then
            NOTES=$(awk "/## \[$VERSION\]|## $VERSION/,/## \[|## [0-9]/" CHANGELOG.md | head -n -1)
            if [ -z "$NOTES" ]; then
              NOTES="Release $VERSION"
            fi
          else
            NOTES="Release $VERSION"
          fi

          # Save to file for gh release create
          echo "$NOTES" > release-notes.md

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"

          gh release create "v$VERSION" \
            dist/* \
            --title "Release v$VERSION" \
            --notes-file release-notes.md \
            $([ "$PRERELEASE" = "true" ] && echo "--prerelease" || echo "")

  # Release Summary
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate-release, build-distribution, test-release, publish-pypi, create-github-release]
    if: always()
    steps:
      - name: Print release status
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          echo "📊 Release Summary for v$VERSION:"
          echo "  Validation: ${{ needs.validate-release.result }}"
          echo "  Build: ${{ needs.build-distribution.result }}"
          echo "  Tests: ${{ needs.test-release.result }}"
          echo "  PyPI: ${{ needs.publish-pypi.result }}"
          echo "  GitHub Release: ${{ needs.create-github-release.result }}"

          if [[ "${{ needs.publish-pypi.result }}" == "success" ]]; then
            echo "✅ Successfully published to PyPI!"
            echo "📦 Install with: pip install nlsq==$VERSION"
          fi

          if [[ "${{ needs.create-github-release.result }}" == "success" ]]; then
            echo "✅ GitHub release created!"
          fi
