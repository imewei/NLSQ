---
# README Examples Validation Workflow
#
# Purpose: Ensure all README.md code examples remain functional and accurate
# Status: ENABLED
# Created: 2025-10-09
#
# This lightweight workflow validates that documentation examples match the current codebase.
# It runs test_readme_examples.py which tests all 12 examples from README.md.

name: Documentation Examples

on:
  push:
    branches: [main]
    paths:
      - 'README.md'
      - 'nlsq/**/*.py'
      - 'tests/test_readme_examples.py'
      - '.github/workflows/readme-examples.yml'
  pull_request:
    branches: [main]
    paths:
      - 'README.md'
      - 'nlsq/**/*.py'
      - 'tests/test_readme_examples.py'
  schedule:
    # Run weekly on Sundays at 00:00 UTC to catch API drift
    - cron: '0 0 * * 0'
  workflow_dispatch:  # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # JAX configuration for consistent CPU-only testing
  JAX_PLATFORMS: cpu
  JAX_ENABLE_X64: true
  PYTHON_VERSION: '3.12'
  # Optimize for speed
  OMP_NUM_THREADS: 2
  MKL_NUM_THREADS: 2
  OPENBLAS_NUM_THREADS: 2

jobs:
  test-readme-examples:
    name: Validate README Examples
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for setuptools-scm versioning

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local
          key: readme-examples-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            readme-examples-${{ runner.os }}-py${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[test]"
          pip install --upgrade "jax[cpu]>=0.6.0"

      - name: Run README examples test suite
        run: |
          echo "::group::Running README Examples Tests"
          pytest tests/test_readme_examples.py \
            -v \
            --tb=short \
            --maxfail=3 \
            --timeout=60 \
            --junitxml=readme-examples-results.xml
          echo "::endgroup::"

      - name: Verify basic NLSQ import
        if: success()
        run: |
          python -c "import nlsq; print(f'‚úÖ NLSQ {nlsq.__version__} imported successfully')"
          python -c "from nlsq import curve_fit; print('‚úÖ curve_fit imported successfully')"

      - name: Generate test summary
        if: always()
        run: |
          echo "## üìã README Examples Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f readme-examples-results.xml ]; then
            # Parse test results
            TESTS=$(grep -o 'tests="[0-9]*"' readme-examples-results.xml | grep -o '[0-9]*' || echo "?")
            FAILURES=$(grep -o 'failures="[0-9]*"' readme-examples-results.xml | grep -o '[0-9]*' || echo "0")
            ERRORS=$(grep -o 'errors="[0-9]*"' readme-examples-results.xml | grep -o '[0-9]*' || echo "0")

            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Tests | $TESTS |" >> $GITHUB_STEP_SUMMARY
            echo "| Failures | $FAILURES |" >> $GITHUB_STEP_SUMMARY
            echo "| Errors | $ERRORS |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$FAILURES" = "0" ] && [ "$ERRORS" = "0" ]; then
              echo "‚úÖ **All README examples are functional and accurate!**" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Some README examples failed. Please update documentation.**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è Test results file not found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìù Test file: \`tests/test_readme_examples.py\`" >> $GITHUB_STEP_SUMMARY
          echo "üìÑ Documentation: \`README.md\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: readme-examples-test-results
          path: readme-examples-results.xml
          retention-days: 30

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && always()
        continue-on-error: true  # Prevent workflow failure if commenting fails
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## üìã README Examples Validation\n\n';

            if (fs.existsSync('readme-examples-results.xml')) {
              const xml = fs.readFileSync('readme-examples-results.xml', 'utf8');
              const tests = xml.match(/tests="(\d+)"/)?.[1] || '?';
              const failures = xml.match(/failures="(\d+)"/)?.[1] || '0';
              const errors = xml.match(/errors="(\d+)"/)?.[1] || '0';

              const allPassed = failures === '0' && errors === '0';

              comment += allPassed
                ? '‚úÖ **All README examples passed!**\n\n'
                : '‚ùå **Some README examples failed.**\n\n';

              comment += `| Metric | Value |\n`;
              comment += `|--------|-------|\n`;
              comment += `| Total Tests | ${tests} |\n`;
              comment += `| Failures | ${failures} |\n`;
              comment += `| Errors | ${errors} |\n\n`;

              comment += `üìù Tested: \`tests/test_readme_examples.py\`\n`;
              comment += `üìÑ Documentation: \`README.md\``;
            } else {
              comment += '‚ö†Ô∏è Test results not available';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
