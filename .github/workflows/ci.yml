name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION_DEFAULT: "3.12"
  COVERAGE_THRESHOLD: 80

jobs:
  # Stage 1: Validate Dependencies
  validate-dependencies:
    name: Validate Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Verify dependency specifications
        run: |
          echo "✓ Checking that requirements use >= constraints..."

          if grep -E "==[0-9]" requirements.txt requirements-dev.txt 2>/dev/null | grep -v "^#"; then
            echo "❌ Found pinned versions! Use >= for minimum constraints."
            exit 1
          fi

          echo "✅ All dependencies use minimum version constraints"

      - name: Verify requirements-lock.txt exists
        run: |
          if [ ! -f requirements-lock.txt ]; then
            echo "⚠️  Warning: requirements-lock.txt not found"
            echo "For reproducible builds, generate with: pip freeze > requirements-lock.txt"
          else
            echo "✅ Lock file exists"
          fi

  # Stage 2: Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: validate-dependencies
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          cache: 'pip'
          cache-dependency-path: 'requirements-dev.txt'

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure

      - name: Check code complexity
        run: |
          pip install radon
          radon cc nlsq/ -a -nb --total-average

  # Stage 3: Test Matrix
  test:
    name: Test - ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: validate-dependencies
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Reduce matrix size - test all Python versions on Ubuntu only
          - os: macos-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements-dev.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=nlsq --cov-report=xml --cov-report=term \
            --cov-fail-under=${{ env.COVERAGE_THRESHOLD }}

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION_DEFAULT
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: python-${{ matrix.python-version }}
          fail_ci_if_error: false

  # Stage 4: Build & Package
  build:
    name: Build & Validate Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for setuptools-scm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-wheel-contents

      - name: Build distributions
        run: python -m build

      - name: Check package metadata
        run: twine check dist/*

      - name: Verify wheel contents
        run: check-wheel-contents dist/*.whl

      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import nlsq; print(f'NLSQ v{nlsq.__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distributions
          path: dist/
          retention-days: 7

  # Stage 5: Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: distributions
          path: dist/

      - name: Install from wheel
        run: pip install dist/*.whl

      - name: Run integration tests
        run: |
          python -c "
          import nlsq
          import jax.numpy as jnp
          import numpy as np

          # Test basic curve fitting
          def exponential(x, a, b):
              return a * jnp.exp(-b * x)

          x = jnp.linspace(0, 4, 50)
          y = 2.5 * jnp.exp(-1.3 * x) + 0.1 * np.random.randn(50)

          popt, pcov = nlsq.curve_fit(exponential, x, y)
          print(f'✅ Integration test passed: a={popt[0]:.2f}, b={popt[1]:.2f}')
          "

  # Final: Success Gate
  ci-success:
    name: All CI Checks Passed
    runs-on: ubuntu-latest
    needs: [validate-dependencies, code-quality, test, build, integration]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          if [[ "${{ needs.validate-dependencies.result }}" != "success" ]] || \
             [[ "${{ needs.code-quality.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.integration.result }}" != "success" ]]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          fi
          echo "✅ All CI checks passed successfully!"
