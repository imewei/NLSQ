---
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  JAX_PLATFORMS: cpu
  JAX_ENABLE_X64: "true"

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: |
            requirements-dev.txt
            .pre-commit-config.yaml

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12", "3.13"]
        exclude:
          # Only test Python 3.12 on macOS and Windows to save CI time
          - os: macos-latest
            python-version: "3.13"
          - os: windows-latest
            python-version: "3.13"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for setuptools-scm

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e . --no-deps

      - name: Run tests
        run: |
          pytest tests/ \
            -v \
            --tb=short \
            --maxfail=10 \
            --timeout=120 \
            --junitxml=test-results-${{ matrix.os }}-py${{ matrix.python-version }}.xml

      - name: Generate coverage (Ubuntu + Python 3.12 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        run: |
          pytest tests/ \
            --cov=nlsq \
            --cov-report=xml \
            --cov-report=term \
            --cov-fail-under=65

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-nlsq
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: test-results-*.xml
          retention-days: 7

  package:
    name: Build & Test Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for setuptools-scm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: requirements-dev.txt

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Test wheel installation
        run: |
          pip install dist/*.whl
          python -c "import nlsq; print(f'NLSQ {nlsq.__version__} imported successfully')"
          python -c "from nlsq import curve_fit; import numpy as np; x=np.array([1,2,3,4]); y=np.array([2,4,6,8]); popt,_=curve_fit(lambda x,a: a*x, x, y); assert abs(popt[0]-2.0)<0.01"

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 30

  status-check:
    name: All CI Checks Passed
    if: always()
    needs: [lint, test, package]
    runs-on: ubuntu-latest
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Lint failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [[ "${{ needs.package.result }}" != "success" ]]; then
            echo "❌ Package build failed"
            exit 1
          fi
          echo "✅ All CI checks passed!"
