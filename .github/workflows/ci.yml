---
name: CI

'on':
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # Weekly run on Sunday
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Performance optimizations
  OMP_NUM_THREADS: 2
  MKL_NUM_THREADS: 2
  OPENBLAS_NUM_THREADS: 2
  JAX_PLATFORMS: cpu
  PYTHONHASHSEED: 0
  PYTHONIOENCODING: utf-8
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_CACHE_DIR: 0  # Enable pip caching
  UV_SYSTEM_PYTHON: 1  # Use uv for faster installs when available

jobs:
  # Fast quality checks using pre-commit
  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full depth for pre-commit hooks

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
            .pre-commit-config.yaml

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install and run pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit run --all-files --show-diff-on-failure

  # Main test job - optimized for speed
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.12']
        include:
          # Extended testing on main branch
          - os: ubuntu-latest
            python-version: '3.13'
            if-condition: github.ref == 'refs/heads/main'
          # Cross-platform testing on main/release
          - os: windows-latest
            python-version: '3.12'
            if-condition: github.event_name == 'release' || github.ref == 'refs/heads/main'
          - os: macos-latest
            python-version: '3.12'
            if-condition: github.event_name == 'release' || github.ref == 'refs/heads/main'

    steps:
      - name: Check run condition
        id: should-run
        run: |
          if [[ "${{ matrix.if-condition }}" == "" ]] || [[ "${{ matrix.if-condition }}" == "true" ]]; then
            echo "run=true" >> $GITHUB_OUTPUT
          else
            echo "run=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Checkout code
        if: steps.should-run.outputs.run == 'true'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Needed for setuptools-scm

      - name: Free disk space (Ubuntu)
        if: runner.os == 'Linux' && steps.should-run.outputs.run == 'true'
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          df -h

      - name: Set up Python ${{ matrix.python-version }}
        if: steps.should-run.outputs.run == 'true'
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Install uv for faster installs
        if: steps.should-run.outputs.run == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install uv || true
        continue-on-error: true

      - name: Install dependencies
        if: steps.should-run.outputs.run == 'true'
        run: |
          # Try uv first for speed, fallback to pip
          if command -v uv &> /dev/null; then
            echo "Using uv for installation"
            uv pip install -e ".[test]"
            uv pip install --upgrade "jax[cpu]"
          else
            echo "Using pip for installation"
            pip install --only-binary=:all: -e ".[test]" || pip install -e ".[test]"
            pip install --upgrade "jax[cpu]"
          fi
        shell: bash

      - name: Run core tests
        if: steps.should-run.outputs.run == 'true'
        run: |
          # Match local Makefile test commands
          pytest tests/test_minpack.py::TestCurveFit::test_one_argument \
                 tests/test_minpack.py::TestCurveFit::test_two_argument \
                 tests/test_least_squares.py::test_basic \
                 -v --tb=short --timeout=60 -x

      - name: Run fast tests
        if: steps.should-run.outputs.run == 'true'
        run: |
          # Match `make test-fast`
          pytest -m "not slow" -v --tb=short --maxfail=5 --timeout=120

      - name: Run import validation
        if: steps.should-run.outputs.run == 'true'
        run: |
          # Match `make validate-install`
          python -c "import nlsq; print(f'NLSQ {nlsq.__version__} imported successfully')"
          python -c "from nlsq import curve_fit; import numpy as np; x = np.array([1,2,3,4]); y = np.array([2,4,6,8]); popt, _ = curve_fit(lambda x, a: a*x, x, y); print(f'Basic curve_fit test: popt={popt}')"

      - name: Upload test results
        if: failure() && steps.should-run.outputs.run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            .coverage
            htmlcov/
            pytest_results.xml
          retention-days: 7

  # Coverage job - separate for clarity
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    needs: [pre-commit]  # Run after pre-commit passes

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv || true
          if command -v uv &> /dev/null; then
            uv pip install -e ".[test]"
            uv pip install --upgrade "jax[cpu]" pytest-cov
          else
            pip install -e ".[test]"
            pip install --upgrade "jax[cpu]" pytest-cov
          fi

      - name: Run tests with coverage
        run: |
          # Match `make test-cov-fast`
          pytest -m "not slow" --cov=nlsq --cov-report=xml --cov-report=html --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-nlsq
          fail_ci_if_error: false

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 14

  # Documentation build
  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Install docs dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]" || pip install -e "."

      - name: Build documentation
        run: |
          # Match `make docs`
          if [ -d "docs" ]; then
            cd docs
            make clean || true
            timeout 300 make html || echo "Docs build completed with warnings"
          fi

      - name: Upload docs artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/
          retention-days: 14

  # Package build and validation
  package:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [pre-commit]  # Run after pre-commit passes

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Build and check package
        run: |
          # Match `make build` and `make validate`
          python -m pip install --upgrade pip build twine
          python -m build --wheel --sdist --outdir dist/
          twine check dist/* --strict

      - name: Test wheel installation
        run: |
          # Match `make install-local`
          pip install dist/*.whl --force-reinstall
          python -c "import nlsq; print(f'Wheel test: NLSQ {nlsq.__version__}')"

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 30

  # Security check
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit

      - name: Run security checks
        run: |
          # Match `make security-check`
          bandit -r nlsq/ -ll --skip B101,B601,B602,B607 -f json -o bandit-report.json || true
          pip-audit --desc --format json --output pip-audit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: '*-report.json'
          retention-days: 30

  # Final status check
  check-status:
    runs-on: ubuntu-latest
    needs: [pre-commit, test, package]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "Pre-commit job: ${{ needs.pre-commit.result }}"
          echo "Test job: ${{ needs.test.result }}"
          echo "Package job: ${{ needs.package.result }}"

          # Fail if critical jobs failed
          if [[ "${{ needs.pre-commit.result }}" == "failure" ]]; then
            echo "Pre-commit checks failed"
            exit 1
          fi

          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "Tests failed"
            exit 1
          fi

          if [[ "${{ needs.package.result }}" == "failure" ]]; then
            echo "Package build failed"
            exit 1
          fi

          echo "✅ All critical checks passed!"
