name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # Weekly run on Sunday

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Performance optimizations for scientific computing
  OMP_NUM_THREADS: 2
  MKL_NUM_THREADS: 2
  OPENBLAS_NUM_THREADS: 2
  JAX_PLATFORMS: cpu
  PYTHONHASHSEED: 0
  PYTHONIOENCODING: utf-8
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_CACHE_DIR: false

jobs:
  # Fast quality checks job - runs in parallel with tests
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for speed

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Cache pre-commit
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-${{ runner.os }}-

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip wheel
        pip install ruff mypy bandit pre-commit

    - name: Run linting (parallel)
      run: |
        # Run linting checks in parallel
        ruff check . --exit-zero &
        ruff format --check . --diff &
        wait

    - name: Run type checking
      run: |
        mypy nlsq --ignore-missing-imports --no-error-summary || true
      continue-on-error: true

    - name: Run security scan
      run: |
        bandit -r nlsq/ -f json || true
      continue-on-error: true

  # Main test job - optimized for speed
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.12']
        # Add more combinations only for releases
        include:
          - os: ubuntu-latest
            python-version: '3.12'
            test-suite: 'fast'
          # Conditional full testing for releases
          - os: ubuntu-latest
            python-version: '3.13'
            test-suite: 'fast'
            if: github.event_name == 'release' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools-scm

    - name: Free disk space
      run: |
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost
        sudo apt-get clean
        df -h

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          pyproject.toml
          requirements*.txt

    - name: Cache package installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          build/
        key: pip-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          pip-${{ runner.os }}-py${{ matrix.python-version }}-
          pip-${{ runner.os }}-

    - name: Install dependencies (optimized)
      run: |
        python -m pip install --upgrade pip wheel setuptools
        # Install only test dependencies for speed
        pip install --only-binary=all -e ".[test]" || pip install -e ".[test]"

    - name: Install JAX CPU (optimized)
      run: |
        # Use CPU-only JAX for faster installation and testing
        pip install --upgrade "jax[cpu]"

    - name: Test core functionality (parallel)
      run: |
        # Run critical tests in parallel with timeout
        pytest tests/test_minpack.py::TestCurveFit::test_one_argument \
               tests/test_minpack.py::TestCurveFit::test_two_argument \
               tests/test_least_squares.py::TestLeastSquares::test_trf_bounds \
               -v --tb=short --timeout=60 -x

    - name: Test extended suite
      if: matrix.test-suite == 'fast' || github.event_name == 'schedule'
      run: |
        # Run more comprehensive tests for scheduled runs
        pytest tests/test_minpack.py tests/test_least_squares.py \
               -v --tb=short --maxfail=3 --timeout=120

    - name: Test import and basic usage
      run: |
        python -c "import nlsq; print(f'NLSQ {nlsq.__version__} imported successfully')"
        python -c "from nlsq import curve_fit; import numpy as np; x = np.array([1,2,3,4]); y = np.array([2,4,6,8]); popt, _ = curve_fit(lambda x, a: a*x, x, y); print(f'Basic curve_fit test: popt={popt}')"

  # Documentation build - runs in parallel
  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install docs dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]" --quiet || pip install -e "." --quiet

    - name: Build documentation
      run: |
        if [ -d "docs" ]; then
          cd docs
          make clean || true
          timeout 300 make html || echo "Docs build timed out or failed"
        fi
      continue-on-error: true

    - name: Upload docs artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
        retention-days: 7

  # Package integrity check - lightweight
  package-check:
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Build and check package
      run: |
        python -m pip install --upgrade pip build twine
        python -m build --wheel --outdir dist/
        twine check dist/* --strict

    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import nlsq; print(f'Wheel test: NLSQ {nlsq.__version__}')"

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheel-python312
        path: dist/*.whl
        retention-days: 7

  # Security and dependency check
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    continue-on-error: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit

    - name: Check dependencies for vulnerabilities
      run: |
        pip-audit --desc --output json || true
        safety check --json || true
      continue-on-error: true

    - name: Run security scan
      run: |
        bandit -r nlsq/ -f json -o bandit-report.json || true
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: '*-report.json'
        retention-days: 30

  # Status check job - waits for all critical jobs
  check-status:
    runs-on: ubuntu-latest
    needs: [quality, test, package-check]
    if: always()

    steps:
    - name: Check job results
      run: |
        echo "Quality job: ${{ needs.quality.result }}"
        echo "Test job: ${{ needs.test.result }}"
        echo "Package job: ${{ needs.package-check.result }}"

        # Fail if critical jobs failed
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "Critical test job failed"
          exit 1
        fi

        if [[ "${{ needs.package-check.result }}" == "failure" ]]; then
          echo "Package check failed"
          exit 1
        fi

        echo "All critical checks passed!"