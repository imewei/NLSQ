---
name: CI

'on':
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 0'  # Weekly run on Sunday
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Performance optimizations
  OMP_NUM_THREADS: 2
  MKL_NUM_THREADS: 2
  OPENBLAS_NUM_THREADS: 2
  JAX_PLATFORMS: cpu
  JAX_ENABLE_X64: true  # Enable 64-bit precision for NLSQ
  PYTHONHASHSEED: 0
  PYTHONIOENCODING: utf-8
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  # PIP_NO_CACHE_DIR removed to enable pip caching with actions/cache
  PYTHON_VERSION: '3.12'  # Default Python version

jobs:
  # Auto-format job - runs first and can fix issues automatically
  auto-format:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Run auto-formatting
        id: auto-format
        run: |
          python -m pip install --upgrade pip pre-commit

          # Run pre-commit and capture if changes were made
          if ! pre-commit run --all-files; then
            echo "formatting_needed=true" >> $GITHUB_OUTPUT
          else
            echo "formatting_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit formatting changes
        if: steps.auto-format.outputs.formatting_needed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git diff --staged --quiet || git commit -m "üé® style: auto-format code with pre-commit hooks

          Auto-formatted by GitHub Actions workflow
          [skip ci]"
          git push

  # Fast quality checks using pre-commit
  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # Only depend on auto-format if it ran
    needs: [auto-format]
    if: |
      always() &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      (needs.auto-format.result == 'success' || needs.auto-format.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full depth for pre-commit hooks

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Install and run pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit run --all-files --show-diff-on-failure

  # Type checking with mypy
  type-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [pre-commit]
    if: |
      always() &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      (needs.pre-commit.result == 'success' || needs.pre-commit.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-mypy-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-mypy-${{ runner.os }}-

      - name: Install mypy and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy numpy jax types-psutil
          pip install -e . --no-deps

      - name: Run mypy type checking
        run: |
          mypy nlsq/ \
            --ignore-missing-imports \
            --follow-imports=skip \
            --disallow-untyped-defs \
            --warn-redundant-casts \
            --warn-unused-ignores \
            --no-implicit-optional \
            --show-error-codes \
            --pretty \
            || echo "‚ö†Ô∏è Type checking found issues (non-blocking for now)"

  # Main test job - optimized for speed
  test:
    needs: [pre-commit, type-check]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.12']
        test-group: ['fast', 'slow']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for setuptools-scm

      - name: Free disk space (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          df -h

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local
          key: pip-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[test]"
          pip install --upgrade "jax[cpu]"

      - name: Cache test results
        uses: actions/cache@v4
        with:
          path: |
            .pytest_cache
            .coverage*
          key: test-cache-${{ runner.os }}-${{ matrix.test-group }}-${{ github.sha }}
          restore-keys: |
            test-cache-${{ runner.os }}-${{ matrix.test-group }}-

      - name: Run fast tests
        if: matrix.test-group == 'fast'
        run: |
          pytest tests/ -m "not slow" \
            -v --tb=short --maxfail=5 --timeout=60 \
            --junitxml=test-results-fast.xml

      - name: Run slow tests
        if: matrix.test-group == 'slow'
        run: |
          pytest tests/ -m "slow" \
            -v --tb=short --maxfail=3 --timeout=300 \
            --junitxml=test-results-slow.xml

      - name: Run import validation
        run: |
          python -c "import nlsq; print(f'NLSQ {nlsq.__version__} imported successfully')"
          python -c "from nlsq import curve_fit; import numpy as np; x = np.array([1,2,3,4]); y = np.array([2,4,6,8]); popt, _ = curve_fit(lambda x, a: a*x, x, y); print(f'Basic test: popt={popt}')"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.test-group }}
          path: |
            test-results-*.xml
            .coverage*
          retention-days: 7

  # Parallel jobs that can run after pre-commit passes
  coverage:
    needs: [pre-commit]
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local
          key: pip-coverage-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-coverage-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e ".[test]"
          pip install --upgrade "jax[cpu]" pytest-cov

      - name: Run tests with coverage
        run: |
          pytest tests/ -m "not slow" \
            --cov=nlsq --cov-report=xml --cov-report=html --cov-report=term \
            --cov-fail-under=65

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-nlsq
          fail_ci_if_error: false

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 14

  # Documentation build - parallel with tests
  docs:
    needs: [pre-commit]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache docs dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            docs/_build
          key: docs-${{ runner.os }}-${{ hashFiles('docs/requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            docs-${{ runner.os }}-

      - name: Install docs dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]" || pip install -e "."

      - name: Build documentation
        run: |
          if [ -d "docs" ]; then
            cd docs
            make clean || true
            timeout 300 make html || echo "Docs build completed with warnings"
          fi

      - name: Upload docs artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/
          retention-days: 14

  # Package build and validation - parallel with tests
  package:
    needs: [pre-commit]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: build-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: Build and check package
        run: |
          python -m pip install --upgrade pip build twine
          python -m build --wheel --sdist --outdir dist/
          twine check dist/* --strict

      - name: Test wheel installation
        run: |
          pip install dist/*.whl --force-reinstall
          python -c "import nlsq; print(f'Wheel test: NLSQ {nlsq.__version__}')"
          pip uninstall -y nlsq

      - name: Test sdist installation
        run: |
          pip install dist/*.tar.gz
          python -c "import nlsq; print(f'Sdist test: NLSQ {nlsq.__version__}')"

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 30

  # Security check - can run in parallel
  security:
    needs: [pre-commit]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache security tools
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: security-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            security-${{ runner.os }}-

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit

      - name: Run security checks
        run: |
          bandit -r nlsq/ -ll --skip B101,B601,B602,B607 -f json -o bandit-report.json || true
          pip-audit --desc --format json --output pip-audit-report.json || true
          safety check --json --output safety-report.json 2>/dev/null || true

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: '*-report.json'
          retention-days: 30

  # Final status check - ensures all critical jobs pass
  check-status:
    runs-on: ubuntu-latest
    needs: [pre-commit, test, package]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "## CI Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-commit | ${{ needs.pre-commit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Package | ${{ needs.package.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Fail if critical jobs failed
          if [[ "${{ needs.pre-commit.result }}" == "failure" ]]; then
            echo "‚ùå Pre-commit checks failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "‚ùå Tests failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          if [[ "${{ needs.package.result }}" == "failure" ]]; then
            echo "‚ùå Package build failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "‚úÖ All critical checks passed!" >> $GITHUB_STEP_SUMMARY
