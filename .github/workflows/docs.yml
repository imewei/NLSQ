name: Documentation

on:
  push:
    branches: [main, develop]
    paths:
      - 'docs/**'
      - 'nlsq/**/*.py'
      - '**.md'
      - 'pyproject.toml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'docs/**'
      - 'nlsq/**/*.py'
      - '**.md'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Build Sphinx Documentation
  build-docs:
    name: Build Sphinx Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for setuptools-scm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements-dev.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Build documentation
        working-directory: docs
        run: |
          make clean
          # Build with warnings as errors to enforce documentation quality
          # -W: Treat warnings as errors (fail build on warnings)
          # --keep-going: Show all warnings before failing
          # Note: -n (nitpicky mode) disabled as too strict for scientific computing library
          # All warnings have been resolved as of 2025-10-31
          make html SPHINXOPTS="-W --keep-going"

      - name: Check for broken links
        working-directory: docs
        run: |
          make linkcheck || echo "::warning::Broken links found (not blocking)"

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sphinx-docs
          path: docs/_build/html/
          retention-days: 7

  # Validate Docstrings
  validate-docstrings:
    name: Validate Docstrings
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydocstyle darglint

      - name: Check docstring style
        run: |
          pydocstyle nlsq/ --convention=numpy || \
            echo "::warning::Docstring style issues found (not blocking)"

      - name: Validate docstring arguments
        run: |
          darglint -v 2 nlsq/ || \
            echo "::warning::Docstring argument mismatches found (not blocking)"

  # Test Documentation Examples
  test-examples:
    name: Test Documentation Examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements-dev.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run doctest
        run: |
          pytest --doctest-modules nlsq/ -v || \
            echo "::warning::Doctest failures found (not blocking)"

      - name: Test example notebooks
        if: hashFiles('examples/*.ipynb') != ''
        run: |
          pip install nbconvert jupyter
          for notebook in examples/*.ipynb; do
            echo "Testing: $notebook"
            jupyter nbconvert --to script --execute "$notebook" || \
              echo "::warning::Notebook $notebook failed (not blocking)"
          done

      - name: Validate documentation code examples
        run: |
          # Create validation script
          cat > validate_docs_examples.py << 'EOF'
          #!/usr/bin/env python3
          """Validate all Python code examples in README and docs/"""
          import re
          import sys
          from pathlib import Path

          def extract_md_code_blocks(filepath):
              """Extract Python code blocks from Markdown."""
              with open(filepath, 'r') as f:
                  content = f.read()
              pattern = r'```python\n(.*?)```'
              return re.findall(pattern, content, re.DOTALL)

          def extract_rst_code_blocks(filepath):
              """Extract Python code blocks from RST."""
              with open(filepath, 'r') as f:
                  lines = f.readlines()
              code_blocks = []
              in_code_block = False
              current_block = []
              block_indent = 0
              for line in lines:
                  if '.. code-block:: python' in line:
                      in_code_block = True
                      current_block = []
                      continue
                  if in_code_block:
                      if line.strip() == '':
                          current_block.append('')
                          continue
                      if not current_block or block_indent == 0:
                          block_indent = len(line) - len(line.lstrip())
                      if len(line) > block_indent and line[:block_indent].strip() == '':
                          current_block.append(line[block_indent:].rstrip())
                      else:
                          if current_block:
                              while current_block and current_block[-1] == '':
                                  current_block.pop()
                              if current_block:
                                  code_blocks.append('\n'.join(current_block))
                          current_block = []
                          in_code_block = False
                          block_indent = 0
              if current_block:
                  while current_block and current_block[-1] == '':
                      current_block.pop()
                  if current_block:
                      code_blocks.append('\n'.join(current_block))
              return code_blocks

          def validate_syntax(code, filepath, index):
              """Validate code syntax."""
              try:
                  compile(code, f'<{filepath}:{index}>', 'exec')
                  return True, None
              except SyntaxError as e:
                  return False, str(e)

          def main():
              # Test README
              readme = Path('README.md')
              readme_blocks = extract_md_code_blocks(readme)
              print(f"README.md: {len(readme_blocks)} examples")

              readme_errors = []
              for i, code in enumerate(readme_blocks, 1):
                  valid, error = validate_syntax(code, 'README.md', i)
                  if not valid:
                      readme_errors.append(f"Example {i}: {error}")

              # Test docs
              docs_path = Path('docs')
              rst_files = list(docs_path.rglob('*.rst'))

              total_docs_examples = 0
              docs_errors = []

              for rst_file in rst_files:
                  code_blocks = extract_rst_code_blocks(rst_file)
                  if not code_blocks:
                      continue

                  rel_path = rst_file.relative_to(docs_path)
                  total_docs_examples += len(code_blocks)

                  for i, code in enumerate(code_blocks, 1):
                      valid, error = validate_syntax(code, str(rel_path), i)
                      if not valid:
                          docs_errors.append(f"{rel_path} Example {i}: {error}")

              print(f"Documentation: {total_docs_examples} examples")
              print(f"\nResults:")
              print(f"  README errors: {len(readme_errors)}")
              print(f"  Documentation errors: {len(docs_errors)}")

              if readme_errors:
                  print("\n‚ùå README.md syntax errors:")
                  for err in readme_errors:
                      print(f"  - {err}")

              if docs_errors:
                  print("\n‚ùå Documentation syntax errors:")
                  for err in docs_errors:
                      print(f"  - {err}")

              if readme_errors or docs_errors:
                  print("\n‚ùå Code example validation FAILED")
                  return 1

              print("\n‚úÖ All code examples are syntactically valid!")
              return 0

          if __name__ == '__main__':
              sys.exit(main())
          EOF

          python validate_docs_examples.py

  # Documentation Coverage Report
  doc-coverage:
    name: Documentation Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install interrogate

      - name: Check documentation coverage
        run: |
          interrogate nlsq/ --verbose --fail-under=0 \
            --exclude='__init__.py' \
            --ignore-init-method \
            --ignore-magic \
            --ignore-private \
            --ignore-semiprivate || true

      - name: Generate coverage badge
        run: |
          interrogate nlsq/ --generate-badge docs/_badges/ \
            --exclude='__init__.py' \
            --ignore-init-method \
            --ignore-magic \
            --ignore-private \
            --ignore-semiprivate || true

  # Documentation Summary
  docs-summary:
    name: Documentation Checks Summary
    runs-on: ubuntu-latest
    needs: [build-docs, validate-docstrings, test-examples, doc-coverage]
    if: always()
    steps:
      - name: Check documentation job statuses
        run: |
          echo "üìä Documentation Build Results:"
          echo "  Build Docs: ${{ needs.build-docs.result }}"
          echo "  Validate Docstrings: ${{ needs.validate-docstrings.result }}"
          echo "  Test Examples: ${{ needs.test-examples.result }}"
          echo "  Doc Coverage: ${{ needs.doc-coverage.result }}"

          if [[ "${{ needs.build-docs.result }}" != "success" ]]; then
            echo "‚ùå Documentation build failed!"
            exit 1
          fi

          echo "‚úÖ Documentation checks completed"
