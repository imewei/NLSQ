---
name: Publish to PyPI

'on':
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to TestPyPI first'
        required: false
        type: boolean
        default: true
      skip_tests:
        description: 'Skip package testing (use with caution)'
        required: false
        type: boolean
        default: false

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false  # Never cancel publishing workflows

env:
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_CACHE_DIR: 1  # Disable pip caching to avoid issues
  JAX_ENABLE_X64: true  # Enable 64-bit precision for NLSQ

jobs:
  # Build distribution packages
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for setuptools-scm
          clean: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools-scm

      - name: Verify package metadata
        run: |
          python -c "import setuptools_scm; print(f'Version: {setuptools_scm.get_version()}')"

      - name: Build package
        run: |
          # Match `make build`
          python -m build --wheel --sdist --outdir dist/
          echo "Build completed successfully"

      - name: Verify build integrity
        run: |
          # Match `make validate`
          twine check dist/* --strict
          ls -lah dist/

          # Verify wheel contents
          python -m zipfile -l dist/*.whl | head -20

          # Check package size (warn if > 10MB)
          for file in dist/*; do
            size=$(du -m "$file" | cut -f1)
            if [ "$size" -gt 10 ]; then
              echo "‚ö†Ô∏è Warning: $file is ${size}MB (> 10MB)"
            fi
          done

          # Ensure both wheel and sdist exist
          test -f dist/*.whl && test -f dist/*.tar.gz
          echo "‚úÖ Package integrity verified"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
          retention-days: 30

  # Test packages on multiple platforms
  test-package:
    needs: build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.12', '3.13']
        package-type: ['wheel']
        include:
          # Test sdist on one platform
          - os: ubuntu-latest
            python-version: '3.12'
            package-type: 'sdist'

    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-packages
          path: dist/

      - name: Install uv for faster installs
        run: |
          python -m pip install --upgrade pip
          pip install uv || true
        continue-on-error: true

      - name: Test wheel installation
        if: matrix.package-type == 'wheel'
        run: |
          # Match `make install-local`
          if command -v uv &> /dev/null; then
            uv pip install dist/*.whl --force-reinstall
          else
            pip install dist/*.whl --force-reinstall
          fi
          echo "‚úÖ Wheel installed successfully"

      - name: Test sdist installation
        if: matrix.package-type == 'sdist'
        run: |
          if command -v uv &> /dev/null; then
            uv pip install dist/*.tar.gz
          else
            pip install dist/*.tar.gz
          fi
          echo "‚úÖ Sdist installed successfully"

      - name: Verify package functionality
        timeout-minutes: 3
        run: |
          # Match `make validate-install`
          python -c "import nlsq; print(f'NLSQ version: {nlsq.__version__}')"
          python -c "from nlsq import curve_fit; print('curve_fit imported successfully')"

          # Test basic functionality
          python -c "
          import nlsq
          import numpy as np
          x = np.array([1, 2, 3, 4])
          y = np.array([2, 4, 6, 8])
          def linear(x, a): return a * x
          try:
              popt, pcov = nlsq.curve_fit(linear, x, y)
              print(f'‚úÖ Basic test passed: popt={popt}')
              assert abs(popt[0] - 2.0) < 0.01, 'Unexpected result'
          except Exception as e:
              print(f'‚ùå Test failed: {e}')
              exit(1)
          "

      - name: Check installed package metadata
        run: |
          python -c "
          import pkg_resources
          import nlsq
          try:
              dist = pkg_resources.get_distribution('nlsq')
              print(f'‚úÖ Package: {dist.project_name} {dist.version}')
              print(f'‚úÖ Location: {dist.location}')
              print(f'‚úÖ Python: {nlsq.__version__}')
              print('‚úÖ Package validation passed')
          except Exception as e:
              print(f'‚ùå Validation failed: {e}')
              exit(1)
          "

  # Publish to TestPyPI
  publish-testpypi:
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.test_pypi == 'true'
    needs: [build, test-package]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: testpypi
      url: https://test.pypi.org/p/nlsq
    permissions:
      id-token: write  # Required for trusted publishing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-packages
          path: dist/

      - name: Verify artifacts before publish
        run: |
          ls -la dist/
          python -m pip install --upgrade twine
          twine check dist/* --strict

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

      - name: Verify TestPyPI publication
        run: |
          echo "‚úÖ Package published to TestPyPI"
          echo "üì¶ View at: https://test.pypi.org/project/nlsq/"
          echo ""
          echo "To test installation:"
          echo "pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ nlsq"

  # Publish to PyPI
  publish-pypi:
    if: |
      github.event_name == 'release' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.test_pypi == 'false')
    needs: [build, test-package]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: pypi
      url: https://pypi.org/p/nlsq
    permissions:
      id-token: write  # Required for trusted publishing

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-packages
          path: dist/

      - name: Final verification before production publish
        run: |
          ls -la dist/
          python -m pip install --upgrade twine
          twine check dist/* --strict
          echo "‚úÖ Final verification complete - ready for PyPI"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true

      - name: Publication success notification
        run: |
          echo "# üéâ Package Published to PyPI!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pip install nlsq" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Links" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ [PyPI Package](https://pypi.org/project/nlsq/)" >> $GITHUB_STEP_SUMMARY
          echo "- üìñ [Documentation](https://nlsq.readthedocs.io)" >> $GITHUB_STEP_SUMMARY
          echo "- üîó [GitHub](https://github.com/imewei/NLSQ)" >> $GITHUB_STEP_SUMMARY

  # Post-publication validation
  post-publish-validation:
    if: always() && (needs.publish-pypi.result == 'success' || needs.publish-testpypi.result == 'success')
    needs: [publish-pypi, publish-testpypi]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Wait for package availability
        run: |
          echo "‚è≥ Waiting for package to be available on PyPI indices..."
          sleep 60

      - name: Validate PyPI installation
        if: needs.publish-pypi.result == 'success'
        run: |
          python -m pip install --upgrade pip
          pip install nlsq --no-cache-dir --force-reinstall
          python -c "import nlsq; print(f'‚úÖ PyPI package verified: {nlsq.__version__}')"
          pip show nlsq

      - name: Validate TestPyPI installation
        if: needs.publish-testpypi.result == 'success'
        run: |
          python -m pip install --upgrade pip
          pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ nlsq --no-cache-dir --force-reinstall
          python -c "import nlsq; print(f'‚úÖ TestPyPI package verified: {nlsq.__version__}')"
          pip show nlsq

      - name: Test basic functionality
        run: |
          python -c "
          from nlsq import curve_fit
          import numpy as np
          x = np.array([1, 2, 3, 4])
          y = np.array([2, 4, 6, 8])
          popt, _ = curve_fit(lambda x, a: a*x, x, y)
          print(f'‚úÖ Post-publish test passed: popt={popt}')
          "

      - name: Generate validation summary
        if: always()
        run: |
          echo "# Post-Publication Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.publish-pypi.result }}" == "success" ]]; then
            echo "‚úÖ PyPI publication validated" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ needs.publish-testpypi.result }}" == "success" ]]; then
            echo "‚úÖ TestPyPI publication validated" >> $GITHUB_STEP_SUMMARY
          fi
