name: Enhanced CI with Dependency Version Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Validate that minimum versions are correctly specified
  validate-dependencies:
    name: Validate Dependency Specifications
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Check requirements files are consistent
        run: |
          echo "Checking that requirements files use >= constraints..."

          if grep -E "==[0-9]" requirements.txt requirements-dev.txt | grep -v "^#"; then
            echo "‚ùå ERROR: Found pinned versions (==) in requirements files!"
            echo "All dependencies should use >= for minimum version constraints"
            echo ""
            echo "Violations found:"
            grep -E "==[0-9]" requirements.txt requirements-dev.txt | grep -v "^#"
            exit 1
          fi

          echo "‚úÖ All requirements files use >= constraints correctly"

      - name: Verify pyproject.toml and requirements.txt are in sync
        run: |
          echo "Checking dependency alignment..."
          python -c "
          import re
          import sys

          # Read pyproject.toml dependencies
          with open('pyproject.toml') as f:
              pyproject = f.read()

          # Extract runtime dependencies from pyproject.toml
          deps_match = re.search(r'dependencies = \[(.*?)\]', pyproject, re.DOTALL)
          if deps_match:
              pyproject_deps = set()
              for line in deps_match.group(1).split('\n'):
                  if line.strip() and not line.strip().startswith('#'):
                      match = re.match(r'\"([a-zA-Z0-9_-]+)', line.strip())
                      if match:
                          pyproject_deps.add(match.group(1).lower())

          # Read requirements.txt dependencies
          with open('requirements.txt') as f:
              req_deps = set()
              for line in f:
                  line = line.strip()
                  if line and not line.startswith('#'):
                      match = re.match(r'([a-zA-Z0-9_-]+)', line)
                      if match:
                          req_deps.add(match.group(1).lower())

          # Compare
          missing_in_req = pyproject_deps - req_deps
          extra_in_req = req_deps - pyproject_deps

          if missing_in_req or extra_in_req:
              print('‚ùå Dependency mismatch between pyproject.toml and requirements.txt!')
              if missing_in_req:
                  print(f'Missing in requirements.txt: {missing_in_req}')
              if extra_in_req:
                  print(f'Extra in requirements.txt: {extra_in_req}')
              sys.exit(1)

          print('‚úÖ pyproject.toml and requirements.txt are in sync')
          "

  # Test with MINIMUM versions specified in requirements
  test-minimum-versions:
    name: Test (Min Versions) - ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: validate-dependencies
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12', '3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements-dev.txt'

      - name: Install minimum dependency versions
        run: |
          python -m pip install --upgrade pip
          # Install with minimum versions by using the constraints as-is
          pip install -r requirements-dev.txt
          pip list

      - name: Run tests
        run: |
          pytest tests/ -v --cov=nlsq --cov-report=term --cov-report=xml --cov-fail-under=65

      - name: Upload coverage (Ubuntu + Python 3.12 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: minimum-versions
          name: minimum-versions

  # Test with LATEST versions (upgrade all dependencies)
  test-latest-versions:
    name: Test (Latest Versions) - ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: validate-dependencies
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12', '3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: 'requirements-dev.txt'

      - name: Install latest dependency versions
        run: |
          python -m pip install --upgrade pip
          # Upgrade all dependencies to latest compatible versions
          pip install --upgrade -r requirements-dev.txt
          echo "üì¶ Installed dependency versions:"
          pip list

      - name: Run tests
        run: |
          pytest tests/ -v --cov=nlsq --cov-report=term --cov-report=xml --cov-fail-under=65

      - name: Upload coverage (Ubuntu + Python 3.12 only)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: latest-versions
          name: latest-versions

  # Lint and type checking (uses latest versions)
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: validate-dependencies
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'requirements-dev.txt'

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade -r requirements-dev.txt

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  # Build and validate package
  build-and-validate:
    name: Build & Test Package
    runs-on: ubuntu-latest
    needs: validate-dependencies
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for setuptools-scm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'requirements-dev.txt'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine check-wheel-contents

      - name: Build package
        run: python -m build

      - name: Check package with twine
        run: twine check dist/*

      - name: Check wheel contents
        run: check-wheel-contents dist/*.whl

      - name: Test wheel installation
        run: |
          pip install dist/*.whl
          python -c "import nlsq; print(f'NLSQ version: {nlsq.__version__}')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Summary job that depends on all others
  ci-success:
    name: All CI Checks Passed
    runs-on: ubuntu-latest
    needs:
      - validate-dependencies
      - test-minimum-versions
      - test-latest-versions
      - lint-and-type-check
      - build-and-validate
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ needs.validate-dependencies.result }}" != "success" ]] || \
             [[ "${{ needs.test-minimum-versions.result }}" != "success" ]] || \
             [[ "${{ needs.test-latest-versions.result }}" != "success" ]] || \
             [[ "${{ needs.lint-and-type-check.result }}" != "success" ]] || \
             [[ "${{ needs.build-and-validate.result }}" != "success" ]]; then
            echo "‚ùå One or more CI jobs failed"
            exit 1
          fi
          echo "‚úÖ All CI jobs passed successfully!"
