name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety

      - name: Run pip-audit on lock file
        run: |
          # Audit the lock file which has pinned versions
          pip-audit -r requirements-lock.txt || true

      - name: Run Safety check
        run: |
          safety check --json || true

      - name: Check for known vulnerabilities in installed packages
        run: |
          pip install -e .[dev]
          pip-audit || echo "::warning::Vulnerabilities found but not blocking"

  # SAST (Static Application Security Testing)
  sast:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] semgrep

      - name: Run Bandit
        run: |
          bandit -r nlsq/ -f json -o bandit-report.json || true
          bandit -r nlsq/ -ll  # Show high/medium issues

      - name: Run Semgrep
        run: |
          semgrep --config=auto nlsq/ --json -o semgrep-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            semgrep-report.json

  # Secret Scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # License Compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install license checker
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Check licenses
        run: |
          # Install only runtime dependencies for license check
          pip install -e .
          pip-licenses --format=markdown --output-file=licenses.md
          cat licenses.md

      - name: Verify allowed licenses
        run: |
          # Allow common open-source licenses
          pip-licenses --allow-only="MIT;BSD;Apache;PSF" || \
            echo "::warning::Some dependencies use non-standard licenses"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.md

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  # Security Summary
  security-summary:
    name: Security Checks Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast, secret-scan, license-check, codeql]
    if: always()
    steps:
      - name: Check security job statuses
        run: |
          echo "üìä Security Scan Results:"
          echo "  Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "  SAST: ${{ needs.sast.result }}"
          echo "  Secret Scan: ${{ needs.secret-scan.result }}"
          echo "  License Check: ${{ needs.license-check.result }}"
          echo "  CodeQL: ${{ needs.codeql.result }}"

          if [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
            echo "üö® Critical: Secrets detected in repository!"
            exit 1
          fi

          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.sast.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è  Warning: Security issues detected (not blocking)"
          fi

          echo "‚úÖ Security scans completed"
