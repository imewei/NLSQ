[build-system]
requires = ["setuptools>=68.0", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "nlsq"
dynamic = ["version"]
description = "GPU/TPU accelerated nonlinear least-squares curve fitting using JAX"
readme = "README.md"
license = {text = "MIT License"}
authors = [
    {name = "Wei Chen", email = "wchen@anl.gov"},
    {name = "Lucas Hofer (Original JAXFit)", email = ""},
    {name = "Milan KrstajiÄ‡ (Original JAXFit)", email = ""},
    {name = "Robert P. Smith (Original JAXFit)", email = ""},
]
maintainers = [
    {name = "Wei Chen", email = "wchen@anl.gov"},
]
keywords = [
    "curve-fitting",
    "optimization",
    "least-squares",
    "jax",
    "gpu",
    "tpu",
    "scientific-computing",
    "machine-learning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed"
]
requires-python = ">=3.12"
dependencies = [
    "numpy>=1.26.0",
    "scipy>=1.11.0",
    "jax>=0.4.20",
    "jaxlib>=0.4.20",
    "matplotlib>=3.8.0",
    "psutil>=5.9.0",  # For memory monitoring
    "tqdm>=4.65.0",   # For progress bars
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-xdist>=3.5",
    "black>=23.12",
    "ruff>=0.1.9",
    "mypy>=1.8",
    "pre-commit>=3.6",
    "ipython>=8.18",
    "bandit>=1.7.5",
    "pyupgrade>=3.15.0",
]
docs = [
    "sphinx>=7.2",
    "sphinx-rtd-theme>=2.0",
    "sphinx-autodoc-typehints>=1.25",
    "ipython>=8.18",
    "myst-parser>=2.0",
]
test = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-xdist>=3.5",
    "hypothesis>=6.92",
]
benchmark = [
    "pytest-benchmark>=4.0",
    "asv>=0.6",
    "memory-profiler>=0.61",
    "psutil>=5.9",
]
all = [
    # Development dependencies
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-xdist>=3.5",
    "black>=23.12",
    "ruff>=0.1.9",
    "mypy>=1.8",
    "pre-commit>=3.6",
    "ipython>=8.18",
    "bandit>=1.7.5",
    "pyupgrade>=3.15.0",
    # Documentation dependencies
    "sphinx>=7.2",
    "sphinx-rtd-theme>=2.0",
    "sphinx-autodoc-typehints>=1.25",
    "myst-parser>=2.0",
    # Test dependencies
    "hypothesis>=6.92",
    # Benchmark dependencies
    "pytest-benchmark>=4.0",
    "asv>=0.6",
    "memory-profiler>=0.61",
    "psutil>=5.9",
]

[project.urls]
Homepage = "https://github.com/imewei/NLSQ"
Documentation = "https://nlsq.readthedocs.io"
Repository = "https://github.com/imewei/NLSQ.git"
Issues = "https://github.com/imewei/NLSQ/issues"
Changelog = "https://github.com/imewei/NLSQ/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["nlsq"]
include-package-data = true

[tool.setuptools.package-data]
nlsq = ["py.typed", "*.pyi"]

[tool.setuptools_scm]
write_to = "nlsq/_version.py"
version_scheme = "post-release"
local_scheme = "no-local-version"

[tool.black]
line-length = 88
target-version = ['py312']
preview = true

[tool.ruff]
line-length = 88
target-version = "py312"
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
    "PL",   # Pylint
    "NPY",  # NumPy specific rules
    "PERF", # Performance linting
    "FURB", # Refurb (modern Python patterns)
]
ignore = ["E501", "E402", "E722", "E741", "B007", "B019", "B028", "PLR2004", "RUF001", "RUF002", "RUF013", "SIM102", "SIM108", "SIM113", "UP007", "UP028", "UP031", "UP038", "F401", "F821", "F841", "NPY002", "PLR0911", "PLR0912", "PLR0913", "PLR0915"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402", "PLR0913", "PLR0912"]
"tests/*" = ["S101", "PLR2004", "NPY002", "B007", "E731", "PLR0913", "B028", "F401"]
"examples/*" = ["PLR0913", "NPY002", "B007", "F841"]
"docs/conf.py" = ["E402"]
"nlsq/__init__.py" = ["PLR0913", "PLR0912"]
"nlsq/_optimize.py" = ["B028", "PLR0912", "PLR0915"]
"nlsq/common_scipy.py" = ["PLR0912", "PLR0913", "PLR0915"]
"nlsq/trf.py" = ["B007", "PLR0912", "PLR0913", "PLR0915", "PLR2004", "UP031"]
"nlsq/large_dataset.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/sparse_jacobian.py" = ["PLR0913", "PLR0912"]
"nlsq/streaming_optimizer.py" = ["PLR0913", "PLR0912"]
"nlsq/memory_manager.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/diagnostics.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/recovery.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/smart_cache.py" = ["PLR0913", "PLR0912", "PLR2004"]
"nlsq/stability.py" = ["PLR0913", "PLR0912", "PLR2004"]
"nlsq/algorithm_selector.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/validators.py" = ["PLR0913", "PLR0912", "PLR0915"]
"nlsq/robust_decomposition.py" = ["PLR0913", "PLR0912", "PLR0915"]

[tool.ruff.lint.isort]
known-first-party = ["nlsq"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = "jax.*"
ignore_missing_imports = true

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false

[tool.pytest.ini_options]
minversion = "7.4"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "--verbose",
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=nlsq",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=60",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests requiring GPU",
    "tpu: marks tests requiring TPU",
    "integration: integration tests",
    "timeout: marks tests with custom timeout settings",
    "memory: marks tests related to memory management",
    "cache: marks tests related to caching functionality",
    "recovery: marks tests related to optimization recovery",
    "stability: marks tests related to numerical stability",
    "diagnostics: marks tests related to optimization diagnostics",
    "validation: marks tests related to input validation",
]

[tool.coverage.run]
source = ["nlsq"]
omit = ["*/tests/*", "*/_version.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
